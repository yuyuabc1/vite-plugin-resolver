{"code":"/* eslint-disable */\r\nimport path from 'path';\r\nimport * as fs from 'fs';\r\nexport default function externals(externals, options) {\r\n    const modCache = {};\r\n    const root = process.cwd();\r\n    const node_modules = path.join(root, 'node_modules');\r\n    const viteExternals = '.vite-plugin-resolver-externals';\r\n    const emptyExternals = Object.keys(externals).length === 0;\r\n    return {\r\n        name: '.vite-plugin-resolver-externals',\r\n        config(config) {\r\n            var _a, _b, _c;\r\n            if (emptyExternals)\r\n                return;\r\n            // ensure viteExternals exist\r\n            const externalsDir = path.join(node_modules, viteExternals);\r\n            fs.existsSync(externalsDir) || fs.mkdirSync(externalsDir);\r\n            // generate external module file.\r\n            for (const [mod, iifeName] of Object.entries(externals)) {\r\n                const modFilename = path.join(node_modules, viteExternals, `${mod}.js`);\r\n                if (!fs.existsSync(modFilename)) {\r\n                    const modContent = (options === null || options === void 0 ? void 0 : options.format) === 'cjs'\r\n                        ? `module.exports = window['${iifeName}'];`\r\n                        : `const ${mod} = window['${iifeName}']; export { ${mod} as default }`;\r\n                    fs.writeFileSync(modFilename, modContent);\r\n                }\r\n            }\r\n            // merge externals module to alias\r\n            const withExternalsAlias = Object.keys(externals).map(key => ({\r\n                find: key,\r\n                // splice node_modules prefix for third party package.jon correct resolved\r\n                // eg: vue\r\n                replacement: `node_modules/${viteExternals}/${key}.js`,\r\n            }));\r\n            const alias = (_b = (_a = config.resolve) === null || _a === void 0 ? void 0 : _a.alias) !== null && _b !== void 0 ? _b : {};\r\n            if (Object.prototype.toString.call(alias) === '[object Object]') {\r\n                for (const [find, replacement] of Object.entries(alias)) {\r\n                    withExternalsAlias.push({ find, replacement });\r\n                }\r\n            }\r\n            else if (Array.isArray(alias)) {\r\n                withExternalsAlias.push(...alias);\r\n            }\r\n            config.resolve = {\r\n                ...((_c = config.resolve) !== null && _c !== void 0 ? _c : {}),\r\n                alias: withExternalsAlias,\r\n            };\r\n        },\r\n        load(id) {\r\n            if (id.includes(viteExternals)) {\r\n                const modFilename = path.join(root, id);\r\n                return modCache[modFilename] || (modCache[modFilename] = fs.readFileSync(modFilename, 'utf8'));\r\n            }\r\n        },\r\n    };\r\n}\r\n","references":["/Users/zhuchenliang/packages/vite-plugin-resolver/node_modules/vite/dist/node/index.d.ts"],"dts":{"name":"/Users/zhuchenliang/packages/vite-plugin-resolver/node_modules/.cache/rollup-plugin-typescript2/placeholder/external.d.ts","writeByteOrderMark":false,"text":"import { Plugin as VitePlugin } from 'vite';\r\nexport default function externals(externals: Record<string, string>, options?: {\r\n    /**\r\n     * @default 'esm'\r\n     * esm will generate code - const vue = window['Vue']; export { vue as default };\r\n     * cjs will generate code - const vue = window['Vue']; module.exports = vue;\r\n     */\r\n    format: 'esm' | 'cjs';\r\n}): VitePlugin;\r\n"}}
